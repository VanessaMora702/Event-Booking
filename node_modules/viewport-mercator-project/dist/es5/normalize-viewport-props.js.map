{"version":3,"sources":["../../src/normalize-viewport-props.js"],"names":["MAX_LATITUDE","MIN_LATITUDE","normalizeViewportProps","width","height","longitude","latitude","zoom","pitch","bearing","flatViewport","WebMercatorViewport","topY","project","bottomY","shiftY","Math","log2","unproject"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA,IAAMA,eAAe,QAArB;AACA,IAAMC,eAAe,CAAC,QAAtB,C,CAEA;;AACA;;AACe,SAASC,sBAAT,OAQZ;AAAA,MAPDC,KAOC,QAPDA,KAOC;AAAA,MANDC,MAMC,QANDA,MAMC;AAAA,MALDC,SAKC,QALDA,SAKC;AAAA,MAJDC,QAIC,QAJDA,QAIC;AAAA,MAHDC,IAGC,QAHDA,IAGC;AAAA,wBAFDC,KAEC;AAAA,MAFDA,KAEC,2BAFO,CAEP;AAAA,0BADDC,OACC;AAAA,MADDA,OACC,6BADS,CACT;;AACD;AACA,MAAIJ,YAAY,CAAC,GAAb,IAAoBA,YAAY,GAApC,EAAyC;AACvCA,gBAAY,oBAAIA,YAAY,GAAhB,EAAqB,GAArB,IAA4B,GAAxC;AACD;;AACD,MAAII,UAAU,CAAC,GAAX,IAAkBA,UAAU,GAAhC,EAAqC;AACnCA,cAAU,oBAAIA,UAAU,GAAd,EAAmB,GAAnB,IAA0B,GAApC;AACD,GAPA,CASD;;;AACA,MAAIC,eAAe,IAAIC,4BAAJ,CAAwB;AAACR,gBAAD;AAAQC,kBAAR;AAAgBC,wBAAhB;AAA2BC,sBAA3B;AAAqCC;AAArC,GAAxB,CAAnB;AACA,MAAIK,OAAOF,aAAaG,OAAb,CAAqB,CAACR,SAAD,EAAYL,YAAZ,CAArB,EAAgD,CAAhD,CAAX;AACA,MAAIc,UAAUJ,aAAaG,OAAb,CAAqB,CAACR,SAAD,EAAYJ,YAAZ,CAArB,EAAgD,CAAhD,CAAd;AACA,MAAIc,SAAS,CAAb;;AAEA,MAAID,UAAUF,IAAV,GAAiBR,MAArB,EAA6B;AAC3B;AACA;AACAG,YAAQS,KAAKC,IAAL,CAAUb,UAAUU,UAAUF,IAApB,CAAV,CAAR,CAH2B,CAK3B;;AACAF,mBAAe,IAAIC,4BAAJ,CAAwB;AAACR,kBAAD;AAAQC,oBAAR;AAAgBC,0BAAhB;AAA2BC,wBAA3B;AAAqCC;AAArC,KAAxB,CAAf;AACAK,WAAOF,aAAaG,OAAb,CAAqB,CAACR,SAAD,EAAYL,YAAZ,CAArB,EAAgD,CAAhD,CAAP;AACAc,cAAUJ,aAAaG,OAAb,CAAqB,CAACR,SAAD,EAAYJ,YAAZ,CAArB,EAAgD,CAAhD,CAAV;AACD;;AACD,MAAIW,OAAO,CAAX,EAAc;AACZ;AACAG,aAASH,IAAT;AACD,GAHD,MAGO,IAAIE,UAAUV,MAAd,EAAsB;AAC3B;AACAW,aAASD,UAAUV,MAAnB;AACD;;AACD,MAAIW,MAAJ,EAAY;AACVT,eAAWI,aAAaQ,SAAb,CAAuB,CAACf,QAAQ,CAAT,EAAYC,SAAS,CAAT,GAAaW,MAAzB,CAAvB,EAAyD,CAAzD,CAAX;AACD;;AAED,SAAO;AAACZ,gBAAD;AAAQC,kBAAR;AAAgBC,wBAAhB;AAA2BC,sBAA3B;AAAqCC,cAArC;AAA2CC,gBAA3C;AAAkDC;AAAlD,GAAP;AACD","sourcesContent":["import WebMercatorViewport from './web-mercator-viewport';\nimport {mod}  from './math-utils';\n\n// defined by mapbox-gl\nconst MAX_LATITUDE = 85.05113;\nconst MIN_LATITUDE = -85.05113;\n\n// Apply mathematical constraints to viewport props\n/* eslint-disable complexity */\nexport default function normalizeViewportProps({\n  width,\n  height,\n  longitude,\n  latitude,\n  zoom,\n  pitch = 0,\n  bearing = 0\n}) {\n  // Normalize degrees\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  // Constrain zoom and shift center at low zoom levels\n  let flatViewport = new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  let topY = flatViewport.project([longitude, MAX_LATITUDE])[1];\n  let bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];\n  let shiftY = 0;\n\n  if (bottomY - topY < height) {\n    // Map height must not be smaller than viewport height\n    // Zoom out map to fit map height into viewport\n    zoom += Math.log2(height / (bottomY - topY));\n\n    // Calculate top and bottom using new zoom\n    flatViewport = new WebMercatorViewport({width, height, longitude, latitude, zoom});\n    topY = flatViewport.project([longitude, MAX_LATITUDE])[1];\n    bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];\n  }\n  if (topY > 0) {\n    // Compensate for white gap on top\n    shiftY = topY;\n  } else if (bottomY < height) {\n    // Compensate for white gap on bottom\n    shiftY = bottomY - height;\n  }\n  if (shiftY) {\n    latitude = flatViewport.unproject([width / 2, height / 2 + shiftY])[1];\n  }\n\n  return {width, height, longitude, latitude, zoom, pitch, bearing};\n}\n"],"file":"normalize-viewport-props.js"}