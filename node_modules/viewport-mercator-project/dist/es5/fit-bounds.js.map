{"version":3,"sources":["../../src/fit-bounds.js"],"names":["fitBounds","width","height","bounds","padding","offset","west","south","east","north","Number","isFinite","p","top","bottom","left","right","viewport","WebMercatorViewport","longitude","latitude","zoom","nw","project","se","size","Math","abs","targetSize","scaleX","scaleY","offsetX","offsetY","center","centerLngLat","unproject","log2","min"],"mappings":"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","sourcesContent":["import WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\n\n/**\n * * An object describing the padding to add to the bounds.\n * @typedef {Object} PaddingObject\n * @property {Number} top - Padding from top in pixels to add to the given bounds\n * @property {Number} bottom - Padding from bottom in pixels to add to the given bounds\n * @property {Number} left - Padding from left in pixels to add to the given bounds\n * @property {Number} right - Padding from right in pixels to add to the given bounds\n */\n\n/**\n * Returns map settings {latitude, longitude, zoom}\n * that will contain the provided corners within the provided width.\n * Only supports non-perspective mode.\n * @param {Number} width - viewport width\n * @param {Number} height - viewport height\n * @param {Array} bounds - [[lon, lat], [lon, lat]]\n * @param {Number|PaddingObject} [padding] - The amount of padding in pixels\n *  to add to the given bounds. Can also be an object with top, bottom, left and right\n *  properties defining the padding.\n * @param {Array} [offset] - The center of the given bounds relative to the map's center,\n *    [x, y] measured in pixels.\n * @returns {Object} - latitude, longitude and zoom\n */\nexport default function fitBounds({\n  width,\n  height,\n  bounds,\n  // options\n  padding = 0,\n  offset = [0, 0]\n}) {\n  const [[west, south], [east, north]] = bounds;\n\n  if (Number.isFinite(padding)) {\n    const p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    // Make sure all the required properties are set\n    assert(Number.isFinite(padding.top) &&\n      Number.isFinite(padding.bottom) &&\n      Number.isFinite(padding.left) &&\n      Number.isFinite(padding.right)\n    );\n  }\n\n  const viewport = new WebMercatorViewport({\n    width,\n    height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n\n  const nw = viewport.project([west, north]);\n  const se = viewport.project([east, south]);\n\n  // width/height on the Web Mercator plane\n  const size = [\n    Math.abs(se[0] - nw[0]),\n    Math.abs(se[1] - nw[1])\n  ];\n\n  const targetSize = [\n    width - padding.left - padding.right - Math.abs(offset[0]) * 2,\n    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2\n  ];\n\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n\n  // scale = screen pixels per unit on the Web Mercator plane\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n\n  // Find how much we need to shift the center\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n\n  const center = [\n    (se[0] + nw[0]) / 2 + offsetX,\n    (se[1] + nw[1]) / 2 + offsetY\n  ];\n\n  const centerLngLat = viewport.unproject(center);\n  const zoom = viewport.zoom + Math.log2(Math.abs(Math.min(scaleX, scaleY)));\n\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom\n  };\n}\n"],"file":"fit-bounds.js"}