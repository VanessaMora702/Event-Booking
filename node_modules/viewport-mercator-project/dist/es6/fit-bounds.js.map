{"version":3,"sources":["../../src/fit-bounds.js"],"names":["WebMercatorViewport","assert","fitBounds","width","height","bounds","padding","offset","Math","abs","Number","isFinite","west","south","east","north","p","top","bottom","left","right","viewport","longitude","latitude","zoom","nw","project","se","size","targetSize","scaleX","scaleY","offsetX","offsetY","center","centerLngLat","unproject","log2","min"],"mappings":"mkBAAA,MAAOA,oBAAP,KAAgC,yBAAhC,CACA,MAAOC,OAAP,KAAmB,UAAnB,CAyBA,cAAe,SAASC,UAAT,CAAmB,CAChCC,KADgC,CAEhCC,MAFgC,CAGhCC,MAHgC,CAKhCC,QAAU,CALsB,CAMhCC,OAAS,CAAC,CAAD,CAAI,CAAJ,CANuB,CAAnB,CAOZ,cAiCCC,KAAKC,GAjCN,iBAGGC,OAAOC,QAHV,8BACsCN,MADtC,0CACOO,IADP,aACaC,KADb,oDACsBC,IADtB,cAC4BC,KAD5B,cAGD,GAAI,gBAAgBT,OAAhB,CAAJ,CAA8B,CAC5B,KAAMU,GAAIV,OAAV,CACAA,QAAU,CACRW,IAAKD,CADG,CAERE,OAAQF,CAFA,CAGRG,KAAMH,CAHE,CAIRI,MAAOJ,CAJC,CAMX,CARD,IAUEf,QAAO,gBAAgBK,QAAQW,GAAxB,GACL,gBAAgBX,QAAQY,MAAxB,CADK,EAEL,gBAAgBZ,QAAQa,IAAxB,CAFK,EAGL,gBAAgBb,QAAQc,KAAxB,CAHF,CAVF,CAiBA,KAAMC,UAAW,GAAIrB,oBAAJ,CAAwB,CACvCG,KADuC,CAEvCC,MAFuC,CAGvCkB,UAAW,CAH4B,CAIvCC,SAAU,CAJ6B,CAKvCC,KAAM,CALiC,CAAxB,CAAjB,CAQMC,GAAKJ,SAASK,OAAT,CAAiB,CAACd,IAAD,CAAOG,KAAP,CAAjB,CARX,CASMY,GAAKN,SAASK,OAAT,CAAiB,CAACZ,IAAD,CAAOD,KAAP,CAAjB,CATX,CAYMe,KAAO,CACX,SAASD,GAAG,CAAH,EAAQF,GAAG,CAAH,CAAjB,CADW,CAEX,SAASE,GAAG,CAAH,EAAQF,GAAG,CAAH,CAAjB,CAFW,CAZb,CAiBMI,WAAa,CACjB1B,MAAQG,QAAQa,IAAhB,CAAuBb,QAAQc,KAA/B,CAA6D,CAAtB,UAASb,OAAO,CAAP,CAAT,CADtB,CAEjBH,OAASE,QAAQW,GAAjB,CAAuBX,QAAQY,MAA/B,CAA8D,CAAtB,UAASX,OAAO,CAAP,CAAT,CAFvB,CAjBnB,CAsBAN,OAAuB,CAAhB,YAAW,CAAX,GAAqC,CAAhB,YAAW,CAAX,CAA5B,CA1CC,CA6CD,KAAM6B,QAASD,WAAW,CAAX,EAAgBD,KAAK,CAAL,CAA/B,CACMG,OAASF,WAAW,CAAX,EAAgBD,KAAK,CAAL,CAD/B,CAIMI,QAAU,CAAC1B,QAAQc,KAAR,CAAgBd,QAAQa,IAAzB,EAAiC,CAAjC,CAAqCW,MAJrD,CAKMG,QAAU,CAAC3B,QAAQY,MAAR,CAAiBZ,QAAQW,GAA1B,EAAiC,CAAjC,CAAqCc,MALrD,CAOMG,OAAS,CACb,CAACP,GAAG,CAAH,EAAQF,GAAG,CAAH,CAAT,EAAkB,CAAlB,CAAsBO,OADT,CAEb,CAACL,GAAG,CAAH,EAAQF,GAAG,CAAH,CAAT,EAAkB,CAAlB,CAAsBQ,OAFT,CAPf,CAYME,aAAed,SAASe,SAAT,CAAmBF,MAAnB,CAZrB,CAaMV,KAAOH,SAASG,IAAT,CAAgBhB,KAAK6B,IAAL,CAAU,SAAS7B,KAAK8B,GAAL,CAASR,MAAT,CAAiBC,MAAjB,CAAT,CAAV,CAb7B,CAeA,MAAO,CACLT,UAAWa,aAAa,CAAb,CADN,CAELZ,SAAUY,aAAa,CAAb,CAFL,CAGLX,IAHK,CAKR","sourcesContent":["import WebMercatorViewport from './web-mercator-viewport';\nimport assert from './assert';\n\n/**\n * * An object describing the padding to add to the bounds.\n * @typedef {Object} PaddingObject\n * @property {Number} top - Padding from top in pixels to add to the given bounds\n * @property {Number} bottom - Padding from bottom in pixels to add to the given bounds\n * @property {Number} left - Padding from left in pixels to add to the given bounds\n * @property {Number} right - Padding from right in pixels to add to the given bounds\n */\n\n/**\n * Returns map settings {latitude, longitude, zoom}\n * that will contain the provided corners within the provided width.\n * Only supports non-perspective mode.\n * @param {Number} width - viewport width\n * @param {Number} height - viewport height\n * @param {Array} bounds - [[lon, lat], [lon, lat]]\n * @param {Number|PaddingObject} [padding] - The amount of padding in pixels\n *  to add to the given bounds. Can also be an object with top, bottom, left and right\n *  properties defining the padding.\n * @param {Array} [offset] - The center of the given bounds relative to the map's center,\n *    [x, y] measured in pixels.\n * @returns {Object} - latitude, longitude and zoom\n */\nexport default function fitBounds({\n  width,\n  height,\n  bounds,\n  // options\n  padding = 0,\n  offset = [0, 0]\n}) {\n  const [[west, south], [east, north]] = bounds;\n\n  if (Number.isFinite(padding)) {\n    const p = padding;\n    padding = {\n      top: p,\n      bottom: p,\n      left: p,\n      right: p\n    };\n  } else {\n    // Make sure all the required properties are set\n    assert(Number.isFinite(padding.top) &&\n      Number.isFinite(padding.bottom) &&\n      Number.isFinite(padding.left) &&\n      Number.isFinite(padding.right)\n    );\n  }\n\n  const viewport = new WebMercatorViewport({\n    width,\n    height,\n    longitude: 0,\n    latitude: 0,\n    zoom: 0\n  });\n\n  const nw = viewport.project([west, north]);\n  const se = viewport.project([east, south]);\n\n  // width/height on the Web Mercator plane\n  const size = [\n    Math.abs(se[0] - nw[0]),\n    Math.abs(se[1] - nw[1])\n  ];\n\n  const targetSize = [\n    width - padding.left - padding.right - Math.abs(offset[0]) * 2,\n    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2\n  ];\n\n  assert(targetSize[0] > 0 && targetSize[1] > 0);\n\n  // scale = screen pixels per unit on the Web Mercator plane\n  const scaleX = targetSize[0] / size[0];\n  const scaleY = targetSize[1] / size[1];\n\n  // Find how much we need to shift the center\n  const offsetX = (padding.right - padding.left) / 2 / scaleX;\n  const offsetY = (padding.bottom - padding.top) / 2 / scaleY;\n\n  const center = [\n    (se[0] + nw[0]) / 2 + offsetX,\n    (se[1] + nw[1]) / 2 + offsetY\n  ];\n\n  const centerLngLat = viewport.unproject(center);\n  const zoom = viewport.zoom + Math.log2(Math.abs(Math.min(scaleX, scaleY)));\n\n  return {\n    longitude: centerLngLat[0],\n    latitude: centerLngLat[1],\n    zoom\n  };\n}\n"],"file":"fit-bounds.js"}