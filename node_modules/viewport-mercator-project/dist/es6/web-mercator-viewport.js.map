{"version":3,"sources":["../../src/web-mercator-viewport.js"],"names":["Viewport","zoomToScale","getWorldPosition","pixelsToWorld","lngLatToWorld","worldToLngLat","getProjectionMatrix","getViewMatrix","fitBounds","vec2_add","vec2_negate","WebMercatorViewport","constructor","width","height","latitude","longitude","zoom","pitch","bearing","altitude","farZMultiplier","scale","Math","max","center","projectionMatrix","viewMatrix","flipY","Object","freeze","projectFlat","lngLat","unprojectFlat","xy","getMapCenterByLngLatPosition","pos","fromLocation","pixelUnprojectionMatrix","toLocation","translate","newCenter","getLocationAtPoint","bounds","options","assign"],"mappings":"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","sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport Viewport from './viewport';\n\nimport {\n  zoomToScale,\n  getWorldPosition,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  getProjectionMatrix,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\n\nimport vec2_add from 'gl-vec2/add';\nimport vec2_negate from 'gl-vec2/negate';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   *\n   * @class\n   * @param {Object} opt - options\n   *\n   * @param {Number} opt.width=1 - Width of \"viewport\" or window\n   * @param {Number} opt.height=1 - Height of \"viewport\" or window\n   * @param {Number} opt.scale=1 - Either use scale or zoom\n   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param {Number} opt.altitude= - Altitude of camera in screen units\n   *\n   * Web mercator projection short-hand parameters\n   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)\n\n   * Notes:\n   *  - Only one of center or [latitude, longitude] can be specified\n   *  - [latitude, longitude] can only be specified when \"mercator\" is true\n   *  - Altitude has a default value that matches assumptions in mapbox-gl\n   *  - width and height are forced to 1 if supplied as 0, to avoid\n   *    division by zero. This is intended to reduce the burden of apps to\n   *    to check values before instantiating a Viewport.\n   */\n  /* eslint-disable complexity */\n  constructor({\n    // Map state\n    width,\n    height,\n    latitude = 0,\n    longitude = 0,\n    zoom = 0,\n    pitch = 0,\n    bearing = 0,\n    altitude = 1.5,\n    farZMultiplier = 10\n  } = {}) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const center = getWorldPosition({longitude, latitude, scale});\n\n    const projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      bearing,\n      altitude,\n      farZMultiplier\n    });\n\n    const viewMatrix = getViewMatrix({\n      height,\n      center,\n      pitch,\n      bearing,\n      altitude,\n      flipY: true\n    });\n\n    super({width, height, viewMatrix, projectionMatrix});\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.scale = scale;\n    this.center = center;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity */\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   *\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(lngLat, scale = this.scale) {\n    return lngLatToWorld(lngLat, scale);\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   *\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xy, scale = this.scale) {\n    return worldToLngLat(xy, scale);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat, this.scale);\n\n    const translate = vec2_add([], toLocation, vec2_negate([], fromLocation));\n    const newCenter = vec2_add([], this.center, translate);\n\n    return worldToLngLat(newCenter, this.scale);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n}\n"],"file":"web-mercator-viewport.js"}