{"version":3,"sources":["../../src/viewport.js"],"names":["equals","createMat4","worldToPixels","pixelsToWorld","mat4_scale","mat4_translate","mat4_multiply","mat4_invert","IDENTITY","Viewport","constructor","width","height","viewMatrix","projectionMatrix","scale","vpm","viewProjectionMatrix","m","mInverse","Error","pixelProjectionMatrix","pixelUnprojectionMatrix","bind","project","unproject","projectFlat","unprojectFlat","viewport","xyz","topLeft","x0","y0","z0","X","Y","coord","x","y","y2","length","targetZ","Number","isFinite","z"],"mappings":"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","sourcesContent":["// View and Projection Matrix management\n\n/* eslint-disable camelcase */\nimport {equals} from 'math.gl';\nimport {createMat4} from './math-utils';\nimport {worldToPixels, pixelsToWorld} from './web-mercator-utils';\n\nimport mat4_scale from 'gl-mat4/scale';\nimport mat4_translate from 'gl-mat4/translate';\nimport mat4_multiply from 'gl-mat4/multiply';\nimport mat4_invert from 'gl-mat4/invert';\n\nconst IDENTITY = createMat4();\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   *\n   * @class\n   * @param {Object} opt - options\n   * @param {Boolean} mercator=true - Whether to use mercator projection\n   *\n   * @param {Number} opt.width=1 - Width of \"viewport\" or window\n   * @param {Number} opt.height=1 - Height of \"viewport\" or window\n   * @param {Array} opt.center=[0, 0] - Center of viewport\n   *   [longitude, latitude] or [x, y]\n   * @param {Number} opt.scale=1 - Either use scale or zoom\n   * @param {Number} opt.pitch=0 - Camera angle in degrees (0 is straight down)\n   * @param {Number} opt.bearing=0 - Map rotation in degrees (0 means north is up)\n   * @param {Number} opt.altitude= - Altitude of camera in screen units\n   *\n   * Web mercator projection short-hand parameters\n   * @param {Number} opt.latitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.longitude - Center of viewport on map (alternative to opt.center)\n   * @param {Number} opt.zoom - Scale = Math.pow(2,zoom) on map (alternative to opt.scale)\n   */\n  /* eslint-disable complexity */\n  constructor({\n    // Window width/height in pixels (for pixel projection)\n    width,\n    height,\n    // Desc\n    viewMatrix = IDENTITY,\n    projectionMatrix = IDENTITY\n  } = {}) {\n    // Silently allow apps to send in 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n    this.scale = 1;\n\n    this.viewMatrix = viewMatrix;\n    this.projectionMatrix = projectionMatrix;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4_multiply(vpm, vpm, this.projectionMatrix);\n    mat4_multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4_scale(m, m, [this.width / 2, -this.height / 2, 1]);\n    mat4_translate(m, m, [1, -1, 0]);\n\n    mat4_multiply(m, m, this.viewProjectionMatrix);\n\n    const mInverse = mat4_invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n  }\n  /* eslint-enable complexity */\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    return viewport.width === this.width &&\n      viewport.height === this.height &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix);\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - screen coordinates [x, y] or [x, y, z], z as pixel depth\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const [x0, y0, z0] = xyz;\n\n    const [X, Y] = this.projectFlat([x0, y0]);\n    const coord = worldToPixels([X, Y, z0], this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz - screen coordinates, z as pixel depth\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @param {Object} opts.targetZ=0 - If pixel depth is unknown, targetZ is used as\n   *   the elevation plane to unproject onto\n   * @return {Array} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZ);\n    const [X, Y] = this.unprojectFlat(coord);\n\n    if (Number.isFinite(z)) {\n      // Has depth component\n      return [X, Y, coord[2]];\n    }\n\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  /**\n   * Project map coordinates to world coordinates.\n   * This should be overridden by each viewport that implements a specific\n   * geographic projection.\n   * @param {Array} xyz - map coordinates\n   * @return {Array} [x,y,z] world coordinates.\n   */\n  projectFlat(xyz, scale = this.scale) {\n    return xyz;\n  }\n\n  /**\n   * Project world coordinates to map coordinates.\n   * This should be overridden by each viewport that implements a specific\n   * geographic projection.\n   * @param {Array} xyz - world coordinates\n   * @return {Array} [x,y,z] map coordinates.\n   */\n  unprojectFlat(xyz, scale = this.scale) {\n    return xyz;\n  }\n\n}\n"],"file":"viewport.js"}