var _EMPTY_HASHES;

import { getIntegerHashValue, getStringifiedValue } from './utils';

/**
 * @function hashIt
 *
 * @description
 * return the unique integer hash value for the object
 *
 * @param {*} object the object to hash
 * @param {boolean} [isCircular] is the object a circular object
 * @returns {number}
 */
var hashIt = function hashIt(object, isCircular) {
  var stringifiedValue = getStringifiedValue(object, isCircular);

  return getIntegerHashValue(stringifiedValue);
};

var UNDEFINED_HASH = hashIt(undefined);
var NULL_HASH = hashIt(null);
var EMPTY_ARRAY_HASH = hashIt([]);
var EMPTY_MAP_HASH = hashIt(new Map());
var EMPTY_NUMBER_HASH = hashIt(0);
var EMPTY_OBJECT_HASH = hashIt({});
var EMPTY_SET_HASH = hashIt(new Set());
var EMPTY_STRING_HASH = hashIt('');

var EMPTY_HASHES = (_EMPTY_HASHES = {}, _EMPTY_HASHES[EMPTY_ARRAY_HASH] = true, _EMPTY_HASHES[EMPTY_MAP_HASH] = true, _EMPTY_HASHES[EMPTY_NUMBER_HASH] = true, _EMPTY_HASHES[EMPTY_OBJECT_HASH] = true, _EMPTY_HASHES[EMPTY_SET_HASH] = true, _EMPTY_HASHES[EMPTY_STRING_HASH] = true, _EMPTY_HASHES[NULL_HASH] = true, _EMPTY_HASHES[UNDEFINED_HASH] = true, _EMPTY_HASHES);

/**
 * @function hashIt.isEqual
 *
 * @description
 * determine if all objects passed are equal in value to one another
 *
 * @param {...Array<*>} objects the objects to test for equality
 * @returns {boolean} are the objects equal
 */
hashIt.isEqual = function () {
  for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {
    objects[_key] = arguments[_key];
  }

  var length = objects.length;

  if (length === 1) {
    throw new Error('isEqual requires at least two objects to be passed for comparison.');
  }

  for (var index = 1; index < length; index++) {
    if (hashIt(objects[index - 1]) !== hashIt(objects[index])) {
      return false;
    }
  }

  return true;
};

/**
 * @function hashIt.isEmpty
 *
 * @description
 * determine if object is empty, meaning it is an array / object / map / set with values populated,
 * or is a string with no length, or is undefined or null
 *
 * @param {*} object the object to test
 * @returns {boolean} is the object empty
 */
hashIt.isEmpty = function (object) {
  return !!EMPTY_HASHES[hashIt(object)];
};

/**
 * @function hashIt.isNull
 *
 * @description
 * determine if object is null
 *
 * @param {*} object the object to test
 * @returns {boolean} is the object null
 */
hashIt.isNull = function (object) {
  return hashIt(object) === NULL_HASH;
};

/**
 * @function hashIt.isUndefined
 *
 * @description
 * determine if object is undefined
 *
 * @param {*} object the object to test
 * @returns {boolean} is the object undefined
 */
hashIt.isUndefined = function (object) {
  return hashIt(object) === UNDEFINED_HASH;
};

export default hashIt;